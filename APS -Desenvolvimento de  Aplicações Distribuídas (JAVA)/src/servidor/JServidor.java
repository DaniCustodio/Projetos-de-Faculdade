/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import objeto.Reply;
import objeto.Request;

/**
 * UNICARIOCA
 * @author Danielle Pereira da Silva Custodio
 * Turma 836
 * Disciplina: Desenvolvimento de Aplicações Distribuídas
 * Ano: 2018
 */
public class JServidor extends javax.swing.JFrame {
    private ServerSocket serverSocket;
    private Socket socket;
    private String directory;
    private ObjectInputStream ois;
    private ObjectOutputStream oos;

    /**
     * Creates new form JServidor
     */
    public JServidor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelDiretorio = new javax.swing.JLabel();
        jTextFieldDiretorio = new javax.swing.JTextField();
        jButtonSelecionar = new javax.swing.JButton();
        jLabelIPServidor = new javax.swing.JLabel();
        jLabelPorta = new javax.swing.JLabel();
        jTextFieldPorta = new javax.swing.JTextField();
        jButtonIniciar = new javax.swing.JButton();
        jLabelSeverStart = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Servidor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 24))); // NOI18N

        jLabelDiretorio.setText("Diretório do Servidor");

        jButtonSelecionar.setText("...");
        jButtonSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarActionPerformed(evt);
            }
        });

        jLabelIPServidor.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabelIPServidor.setText("...");

        jLabelPorta.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPorta.setText("Porta:");

        jTextFieldPorta.setText("40000");

        jButtonIniciar.setText("Iniciar");
        jButtonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIniciarActionPerformed(evt);
            }
        });

        jLabelSeverStart.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabelSeverStart.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldDiretorio, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelDiretorio)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelPorta)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(191, 191, 191)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSelecionar)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSeverStart)
                            .addComponent(jLabelIPServidor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabelDiretorio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPorta))
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSeverStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelIPServidor))
                    .addComponent(jButtonIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIniciarActionPerformed
        Thread iniciar = new Thread(new Starter(this));
        iniciar.start();
    }//GEN-LAST:event_jButtonIniciarActionPerformed
    
    //selecionar diretório de sincronização
    private void jButtonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Escolha o arquivo");
        if (chooser.showOpenDialog(this) == JFileChooser.OPEN_DIALOG) {
            directory = chooser.getSelectedFile().getPath();
            jTextFieldDiretorio.setText(directory);
        }
    }//GEN-LAST:event_jButtonSelecionarActionPerformed
    
    public class Starter implements Runnable {
        JFrame frame;

        public Starter(JFrame frame) {
            this.frame = frame;
        }
        
        @Override
        public void run() {
            
            try {
                if(directory.equals(null)){
                    throw new java.lang.NullPointerException("Diretório Inválido");
                }
                serverSocket = new ServerSocket(Integer.parseInt(jTextFieldPorta.getText()));
                System.out.println("DEBUG - Server Started at " + jTextFieldPorta.getText());
                jLabelSeverStart.setText("Servidor iniciado na porta: " + jTextFieldPorta.getText());
                jLabelIPServidor.setText("IP Servidor: " + InetAddress.getLocalHost().toString());
                while (true) {
                    socket = serverSocket.accept();
                    new Thread(new ThreadAnswerClient(socket, frame)).start();
                }
            }catch(java.lang.NumberFormatException nfe){
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, nfe);
                JOptionPane.showMessageDialog(frame, "Informe uma porta válida!");
            }catch(java.lang.NullPointerException npe){
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, npe);
                JOptionPane.showMessageDialog(frame, "Diretório Inválido");
            } catch (IOException ex) {
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(frame, ex.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(frame, ex.getMessage());
            }
        }

    }

    private class ThreadAnswerClient implements Runnable {

        private Socket socket;
        private JFrame frame;
        
        public ThreadAnswerClient(Socket socket, JFrame frame) {
            this.socket = socket;
            this.frame = frame;
        }

        @Override
        public void run() {
            try {
                ois = new ObjectInputStream(socket.getInputStream());
                oos = new ObjectOutputStream(socket.getOutputStream());

                Request req = (Request) ois.readObject(); //receber requisição

                Reply reply = new Reply();
                
                //verifica o tipo de requisição
                switch (req.getRequestType()) {
                    case Request.SEND_FILE_LIST: //envia uma lista com arquivos do diretório selecionado
                        
                        List<File> fileList = new ArrayList<>();
                        fileList = listFiles(new File(directory));

                        reply.setReplyType(Reply.SENDIND_FILE_LIST);
                        reply.setDirectoryList(fileList);

                        oos.writeObject(reply);
                        oos.flush();
                        break;
                    case Request.DOWNLOAD: //envia o arquivo solicitado na requisição
                        
                        File path = new File(directory + "/" + req.getFileName());

                        reply.setReplyType(Reply.SENDIND_FILE);
                        reply.setFileName(path.getName());
                        reply.setFileByte(serializeFile(path));

                        oos.writeObject(reply);
                        oos.flush();
                        break;
                    case Request.UPLOADING: //recebe o arquivo enviado na requisição 
                        receiveFile(directory + "/" + req.getFileName(), req.getFileByte());
                        break;
                    default:
                        break;
                }
            
            }catch (java.io.FileNotFoundException ex) {
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(frame, ex.getMessage());
            }catch(java.net.SocketException se){
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, se);
                JOptionPane.showMessageDialog(frame, "O cliente encerrou a conexão!");
            } catch (IOException ex) {
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(frame, ex.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(frame, ex.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(JServidor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(frame, ex.getMessage());
            }

        }
    }

    public List listFiles(File file) {
        List lista = null;
        lista = Arrays.asList(file.listFiles());
        return lista;
    }

    public byte[] serializeFile(File file) throws FileNotFoundException, IOException {
        FileInputStream fis;
        byte[] bFile = null;
        
        bFile = new byte[(int) file.length()];
        fis = new FileInputStream(file);
        fis.read(bFile);
        fis.close();

        return bFile;
    }

    public void receiveFile(String dir, byte[] arq) throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(dir);
        fos.write(arq);
        fos.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JServidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIniciar;
    private javax.swing.JButton jButtonSelecionar;
    private javax.swing.JLabel jLabelDiretorio;
    private javax.swing.JLabel jLabelIPServidor;
    private javax.swing.JLabel jLabelPorta;
    private javax.swing.JLabel jLabelSeverStart;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldDiretorio;
    private javax.swing.JTextField jTextFieldPorta;
    // End of variables declaration//GEN-END:variables
}
