/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cliente;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import objeto.Reply;
import objeto.Request;

/**
 * UNICARIOCA
 * @author Danielle Pereira da Silva Custodio
 * Turma 836
 * Disciplina: Desenvolvimento de Aplicações Distribuídas
 * Ano: 2018
 */
public class JCliente extends javax.swing.JFrame {
    private String directory;
    private List<File> listaUpload;
    private List<File> listaDownload;
    /**
     * Creates new form NewJFrame
     */
    public JCliente() {
        initComponents();
        listaUpload = new ArrayList<>();
        listaDownload = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelDiretorio = new javax.swing.JLabel();
        jTextFieldDiretorio = new javax.swing.JTextField();
        jButtonSelecionar = new javax.swing.JButton();
        jButtonIniciar = new javax.swing.JButton();
        jLabelIPServidor = new javax.swing.JLabel();
        jTextFieldIPServidor = new javax.swing.JTextField();
        jLabelPorta = new javax.swing.JLabel();
        jTextFieldPorta = new javax.swing.JTextField();
        jLabelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cliente", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 24))); // NOI18N

        jLabelDiretorio.setText("Diretório de Sincronização:");

        jButtonSelecionar.setText("...");
        jButtonSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarActionPerformed(evt);
            }
        });

        jButtonIniciar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButtonIniciar.setText("Iniciar");
        jButtonIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIniciarActionPerformed(evt);
            }
        });

        jLabelIPServidor.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelIPServidor.setText("IP Servidor:");

        jTextFieldIPServidor.setText("localhost");

        jLabelPorta.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPorta.setText("Porta:");

        jTextFieldPorta.setText("40000");

        jLabelStatus.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelDiretorio)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldDiretorio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSelecionar))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelIPServidor)
                                    .addComponent(jLabelPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldPorta, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                                    .addComponent(jTextFieldIPServidor, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))
                        .addGap(7, 7, 7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelStatus)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelDiretorio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldIPServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelIPServidor))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPorta)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jButtonIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabelStatus)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //selecionar diretório de sincronização
    private void jButtonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Escolha o arquivo");

        if (chooser.showOpenDialog(this) == JFileChooser.OPEN_DIALOG) {
            directory = chooser.getSelectedFile().getPath();
            jTextFieldDiretorio.setText(directory);
        }
    }//GEN-LAST:event_jButtonSelecionarActionPerformed
    
    private void jButtonIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIniciarActionPerformed
        jLabelStatus.setText("Sincronização Iniciada!");
        runClient();  
    }//GEN-LAST:event_jButtonIniciarActionPerformed
    
    public void runClient() {
        try {
            
            if(directory.equals(null) || jTextFieldIPServidor.getText().equals("")|| jTextFieldPorta.getText().equals("")){
                throw new java.lang.NullPointerException("Informe valores válidos!");
            }
            
            Socket socket = new Socket(jTextFieldIPServidor.getText(), Integer.parseInt(jTextFieldPorta.getText()));
            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
            
            //envia uma requisição para obter a lista de arquivos do servidor
            Request request = new Request();
            request.setRequestType(Request.SEND_FILE_LIST);
            oos.writeObject(request);
            oos.flush();

            Reply reply = (Reply) ois.readObject(); //recebe a resposta
            
            //separa os arquivos em 2 listas: upload e download
            for (File file : reply.getDirectoryList()) {
                String fileNameServer = file.getName();
                Date fileDateServer = new Date(file.lastModified());
                File fileClient = new File(directory + "/" + fileNameServer);
                
                //se o arquivo existir e for mais rececente vai para lista de upload, caso contrário download
                if (fileClient.exists() && new Date(fileClient.lastModified()).after(fileDateServer) && file.isFile()) {
                    listaUpload.add(fileClient);
                } else {
                    listaDownload.add(file);
                }
            }
            
            //verifica os arquivos que estão no cliente mais não estão no servidor e add a lista de upload
            for (File fileClient : listFiles(new File(directory))) {
                boolean exist = false;
                for (File fileServer : reply.getDirectoryList()) {
                    if (fileClient.getName().equals(fileServer.getName()) && fileClient.isFile()) {
                        exist = true;
                    }
                }
                if (!exist) {
                    listaUpload.add(fileClient);
                }
            }
            System.out.println("DEBUG: Listas criadas!");
            socket.close();
            oos.close();
            ois.close();
            
            //inicia as Threads de Download e Upload
            new Thread(new ThreadUpload(this)).start();
            new Thread(new ThreadDownload(this)).start();
        
        }catch (java.io.FileNotFoundException ex) {
                Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (java.lang.NullPointerException ex) {
            Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Diretório Inválido");   
        } catch (java.net.ConnectException ex) {
            Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Não foi possível estabelecer uma conexão com o servidor!");
        } catch (IOException ex) {
            Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    //envia os arquivos na lista de Upload
    private class ThreadUpload implements Runnable {

        private Socket socket;
        private ObjectInputStream ois;
        private ObjectOutputStream oos;
        private JFrame frame;

        public ThreadUpload(JFrame frame) {
            this.frame = frame;
        }
        
        @Override
        public synchronized void run() {
            for (File file : listaUpload) {
                try {
                    socket = new Socket(jTextFieldIPServidor.getText(), Integer.parseInt(jTextFieldPorta.getText()));
                    oos = new ObjectOutputStream(socket.getOutputStream());
                    ois = new ObjectInputStream(socket.getInputStream());

                    Request request = new Request();
                    request.setRequestType(Request.UPLOADING);
                    request.setFileName(file.getName());
                    request.setFileByte(serializeFile(file));

                    oos.writeObject(request);
                    oos.flush();

                    socket.close();
                    oos.close();
                    ois.close();
                    
                } catch (IOException ex) {
                    Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(frame, ex.getMessage());
                } catch (Exception ex) {
                    Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(frame, ex.getMessage());
                }
            }
            jLabelStatus.setText("Sincronização Concluída!");
        }
    }
    
    //requisita os arquivos da lista de download
    private class ThreadDownload implements Runnable {

        private Socket socket;
        private ObjectInputStream ois;
        private ObjectOutputStream oos;
        private JFrame frame;

        public ThreadDownload(JFrame frame) {
            this.frame = frame;
        }

        @Override
        public synchronized void run() {
            for (File file : listaDownload) {
                try {
                    socket = new Socket(jTextFieldIPServidor.getText(), Integer.parseInt(jTextFieldPorta.getText()));
                    oos = new ObjectOutputStream(socket.getOutputStream());
                    ois = new ObjectInputStream(socket.getInputStream());

                    Request request = new Request();
                    request.setRequestType(Request.DOWNLOAD);
                    request.setFileName(file.getName());

                    oos.writeObject(request);
                    oos.flush();

                    Reply reply = (Reply) ois.readObject();

                    if (reply.getReplyType() == Reply.SENDIND_FILE) {
                        receiveFile(directory + "/" + reply.getFileName(), reply.getFileByte());
                    }
                    socket.close();
                    oos.close();
                    ois.close();
                    
                } catch (IOException ex) {
                    Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(frame, ex.getMessage());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(frame, ex.getMessage());
                } catch (Exception ex) {
                    Logger.getLogger(JCliente.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(frame, ex.getMessage());
                }
            }
            jLabelStatus.setText("Sincronização Concluída!");
        }
    }

    //retorna uma lista de arquivos do diretório informado
    public List<File> listFiles(File file) {
        List lista = null;
        lista = Arrays.asList(file.listFiles());
        return lista;
    }
    
    //retorna o arquivo informado serializado
    public byte[] serializeFile(File file) throws FileNotFoundException, IOException {
        FileInputStream fis;
        byte[] bFile = null;

        bFile = new byte[(int) file.length()];
        fis = new FileInputStream(file);
        fis.read(bFile);
        fis.close();

        return bFile;
    }
    
    public void receiveFile(String dir, byte[] arq) throws FileNotFoundException, IOException {
        FileOutputStream fos = new FileOutputStream(dir);
        fos.write(arq);
        fos.close();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIniciar;
    private javax.swing.JButton jButtonSelecionar;
    private javax.swing.JLabel jLabelDiretorio;
    private javax.swing.JLabel jLabelIPServidor;
    private javax.swing.JLabel jLabelPorta;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldDiretorio;
    private javax.swing.JTextField jTextFieldIPServidor;
    private javax.swing.JTextField jTextFieldPorta;
    // End of variables declaration//GEN-END:variables
}
